apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "geopulse.fullname" . }}-frontend
  labels:
    {{- include "geopulse.frontend.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.frontend.replicaCount }}
  selector:
    matchLabels:
      {{- include "geopulse.frontend.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      labels:
        {{- include "geopulse.frontend.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "geopulse.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.frontend.securityContext | nindent 8 }}
      initContainers:
        # Wait for backend to be ready
        - name: wait-for-backend
          image: busybox:1.36
          command:
            - sh
            - -c
            - |
              echo "Waiting for backend to be ready..."
              until nc -z {{ include "geopulse.fullname" . }}-backend {{ .Values.backend.service.port }}; do
                echo "Backend is unavailable - sleeping"
                sleep 2
              done
              echo "Backend is up - continuing"
      containers:
        - name: frontend
          image: {{ include "geopulse.frontend.image" . }}
          imagePullPolicy: {{ .Values.frontend.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          env:
            - name: API_BASE_URL
              value: "/api"
          envFrom:
            - configMapRef:
                name: {{ include "geopulse.fullname" . }}-config
          {{- if .Values.frontend.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.frontend.livenessProbe.httpGet.path }}
              port: {{ .Values.frontend.livenessProbe.httpGet.port }}
            initialDelaySeconds: {{ .Values.frontend.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.frontend.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.frontend.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.frontend.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.frontend.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.frontend.readinessProbe.httpGet.path }}
              port: {{ .Values.frontend.readinessProbe.httpGet.port }}
            initialDelaySeconds: {{ .Values.frontend.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.frontend.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.frontend.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.frontend.readinessProbe.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.frontend.resources | nindent 12 }}
      {{- with .Values.frontend.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.frontend.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.frontend.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}